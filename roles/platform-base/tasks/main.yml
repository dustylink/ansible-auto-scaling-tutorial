---
# roles/platform-base/tasks/main.yml

## moved 'update base ami' to first step because,
## adding the 'universe' repo was intermittantly failing otherwise.
## i believe due to playbook running 'too quickly' after instance init and apt files being locked.
## can perhaps look into a timeout, blech.

- name: Update base AMI
  apt: update_cache=yes upgrade=dist
  become: yes

- name: Add 'universe' repo based on Ubuntu release
  apt_repository: repo='deb http://archive.ubuntu.com/ubuntu {{ansible_distribution_release}} universe' state=present
  become: yes

- name: Install unsorted base packages
  apt: name={{ item }} state=latest update_cache=yes
  with_items:
    - libapr1-dev
    - libaprutil1-dev
    - libasound2-dev
    - libgconf2-dev
    - libgeos++-dev
    - libgif-dev
    - libgpm-dev
    - libgtk-3-dev
    - libm17n-dev
    - libmagick++-dev
    - libmysqlclient-dev
    - libotf-dev
    - libproj-dev
    - libsqlite3-dev
    - libxaw7-dev
    - libyaml-dev
    - xaw3dg-dev
    - augeas-tools
    - autoconf
    - fail2ban
    - god
    - imagemagick
    - lynx
    - mysql-client
    - ntp
    - nodejs
    - quilt
    - remake
    - sharutils
    - sqlite3
    - xterm
    - zshdb
  become: yes

- name: Install tools
  apt: package={{ item }} state=latest
  with_items:
    - git
    - awscli
    - emacs
    - nmap
  become: yes

- name: Capybara Webkit depends
  apt: package={{ item }} state=latest
  with_items:
    - qt4-dev-tools
    - libqt4-dev
    - libqt4-core
    - libqt4-gui
  become: yes

- name: Set Postfix option type as internet site
  debconf: name=postfix question="postfix/main_mailer_type" value="'Internet Site'" vtype="string"
  become: yes

- name: Set Postfix option hostname
  debconf: name=postifx question="postfix/mailname" value="{{ansible_fqdn}}" vtype="string"
  become: yes

- name: Install mail tools
  apt: package={{ item }} state=installed force=yes update_cache=yes cache_valid_time=3600
  with_items:
    - postfix
    - mailutils
    - bsd-mailx
  become: yes

#- name: Backup crontab
#  copy:
#   src: /etc/crontab
#    dest: /etc/crontab.orig
#  sudo: yes

# git-deploy bootstrap
## the below fails due to boto not being install on host
#- name:
#  s3:
#    bucket: mypizza-deployment-bootstrap
#    object: /git-deploy-mypizza.pub
#    dest: /home/ubuntu/.ssh/git-deploy-mypizza.pub
#    mode: get

- name: Bootstrap git-deploy public key
  command: aws s3 cp --region us-east-1 s3://mypizza-deployment-bootstrap/git-deploy-mypizza.pub /home/ubuntu/.ssh/git-deploy-mypizza.pub

- name: Bootstrap git-deploy private key
  command: aws s3 cp --region us-east-1 s3://mypizza-deployment-bootstrap/git-deploy-mypizza /home/ubuntu/.ssh/git-deploy-mypizza

# dont think i need this, as i can force the git clone
#- name: bootstrap known_hosts
#  command: aws s3 cp --region us-east-1 s3://mypizza-deployment-bootstrap/known_hosts /home/ubuntu/.ssh/known_hosts

- name: Permission git-deploy private key
  file:
    path: ~/.ssh/git-deploy-mypizza
    mode: 0400

- name: Ensure private key in ssh config
  lineinfile: dest=~/.ssh/config state=present create=yes line="IdentityFile ~/.ssh/git-deploy-mypizza"

- name: git_config user name
  git_config:
    name: user.name
    scope: global
    value: deploy-mypizza

- name: git_config email
  git_config:
    name: user.email
    scope: global
    value: git-deploy@mypizza.com