---
# roles/auto-scaling/tasks/main.yml

- name: Build Auto Scaling Group
  ec2_asg:
    region: "{{ region }}"
    name: webapp
    load_balancers: "{{ elb_result.elb.name }}"
    availability_zones: "{{ zone }}"
    launch_config_name: "{{ ec2_lc.name }}"
    health_check_type: ELB
    health_check_period: 300
    min_size: 2
    max_size: 10
    state: present
#  register: asg_result
#- debug: var=asg_result

# this is kinda broken: if no ASG exists, "asg_properties_result.stdout": comes back as        "AutoScalingGroups": [], which means asg_properties isnt set, and then fubar
# temp fix, repeat code above
- name: Retrieve current Auto Scaling Group properties
  command: "aws --region {{ region }} autoscaling describe-auto-scaling-groups --auto-scaling-group-names webapp"
  register: asg_properties_result
#- debug: var=asg_properties_result
#- debug: var=asg_properties_result.stdout

- name: Set asg_properties variable from JSON output if the Auto Scaling Group already exists
  set_fact:
    asg_properties: "{{ (asg_properties_result.stdout | from_json).AutoScalingGroups[0] }}"
  when: (asg_properties_result.stdout | from_json).AutoScalingGroups | count

- name: Configure Auto Scaling Group and perform rolling deploy
  ec2_asg:
    region: "{{ region }}"
    name: webapp
    load_balancers: "{{ elb_result.elb.name }}"
    availability_zones: "{{ zone }}"
    launch_config_name: "{{ ec2_lc.name }}"
    health_check_type: ELB
    health_check_period: 300
    desired_capacity: "{{ asg_properties.DesiredCapacity | default(2) }}"
    replace_all_instances: yes
    replace_batch_size: "{{ (asg_properties.DesiredCapacity | default(2) / 4) | round(0, 'ceil') | int }}"
    min_size: 2
    max_size: 10
    state: present
  register: asg_result
#- debug: var=asg_result

- name: Configure Scaling Policies
  ec2_scaling_policy:
    region: "{{ region }}"
    name: "{{ item.name }}"
    asg_name: webapp
    state: present
    adjustment_type: "{{ item.adjustment_type }}"
    min_adjustment_step: "{{ item.min_adjustment_step }}"
    scaling_adjustment: "{{ item.scaling_adjustment }}"
    cooldown: "{{ item.cooldown }}"
  with_items:
    - name: "Increase Group Size"
      adjustment_type: "ChangeInCapacity"
      scaling_adjustment: +1
      min_adjustment_step: 1
      cooldown: 180
    - name: "Decrease Group Size"
      adjustment_type: "ChangeInCapacity"
      scaling_adjustment: -1
      min_adjustment_step: 1
      cooldown: 300
  register: sp_result
#- debug: var=sp_result

- name: Determine Metric Alarm configuration
  set_fact:
    metric_alarms:
      - name: "{{ sp_result.results[0].as_name }}-ScaleUp"
        comparison: ">="
        threshold: 50.0
        alarm_actions:
          - "{{ sp_result.results[0].arn }}"
      - name: "{{ sp_result.results[0].as_name }}-ScaleDown"
        comparison: "<="
        threshold: 20.0
        alarm_actions:
          - "{{ sp_result.results[1].arn }}"

- name: Configure Metric Alarms and link to Scaling Policies
  ec2_metric_alarm:
    region: "{{ region }}"
    name: "{{ item.name }}"
    state: present
    metric: "CPUUtilization"
    namespace: "AWS/EC2"
    statistic: "Average"
    comparison: "{{ item.comparison }}"
    threshold: "{{ item.threshold }}"
    period: 60
    evaluation_periods: 5
    unit: "Percent"
    dimensions:
      AutoScalingGroupName: "{{ sp_result.results[0].as_name }}"
    alarm_actions: "{{ item.alarm_actions }}"
  with_items: "{{ metric_alarms }}"
  when: asg_result.max_size > 1
  register: ma_result
#- debug: var=ma_result